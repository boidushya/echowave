name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build binaries
      run: |
        VERSION=${{ steps.version.outputs.version }}
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        COMMIT=$(git rev-parse --short HEAD)
        
        mkdir -p dist/
        
        # Build for multiple platforms
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/echowave-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/echowave-darwin-arm64 .
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/echowave-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/echowave-linux-arm64 .
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/echowave-windows-amd64.exe .
        GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o dist/echowave-windows-arm64.exe .

    - name: Create archives
      run: |
        cd dist/
        
        # Create tar.gz for Unix systems
        tar -czf echowave-darwin-amd64.tar.gz echowave-darwin-amd64
        tar -czf echowave-darwin-arm64.tar.gz echowave-darwin-arm64
        tar -czf echowave-linux-amd64.tar.gz echowave-linux-amd64
        tar -czf echowave-linux-arm64.tar.gz echowave-linux-arm64
        
        # Create zip for Windows
        zip echowave-windows-amd64.zip echowave-windows-amd64.exe
        zip echowave-windows-arm64.zip echowave-windows-arm64.exe

    - name: Generate checksums
      run: |
        cd dist/
        sha256sum *.tar.gz *.zip > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/*.tar.gz
          dist/*.zip
          dist/checksums.txt
        body: |
          ## ðŸŽµ EchoWave ${{ steps.version.outputs.version }}
          
          ### What's New
          - Latest improvements and bug fixes
          - Enhanced audio transcription with OpenAI Whisper
          - Part of the [better-lyrics](https://better-lyrics.boidu.dev) ecosystem
          
          ### Installation
          
          **Install Script**
          ```bash
          curl -sSL https://raw.githubusercontent.com/boidushya/echowave/main/install.sh | bash
          ```
          
          **Manual Installation**
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Move the binary to a directory in your PATH
          
          ### Quick Start
          ```bash
          # Transcribe YouTube video
          echowave https://youtube.com/watch?v=xyz
          
          # Transcribe local audio
          echowave audio.mp3
          ```
          
          ### Requirements
          - ffmpeg
          - openai-whisper
          - yt-dlp (for YouTube downloads)
          
          EchoWave will check for these dependencies and provide installation instructions if needed.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

